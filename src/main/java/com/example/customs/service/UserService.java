package com.example.customs.service;

import com.example.customs.dto.UserDTO;
import com.example.customs.entity.User;
import com.example.customs.mapper.UserMapper;
import com.example.customs.repository.UserRepository;
import com.example.customs.util.UnpValidator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final VerificationService verificationService;
    private final UserMapper userMapper; // üí° –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –º–∞–ø–ø–µ—Ä


    public UserDTO register(UserDTO dto) {
        log.info("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –£–ù–ü: {}", dto.getUnp());

        if (!UnpValidator.isValid(dto.getUnp())) {
            log.warn("–£–ù–ü {} –Ω–µ –ø—Ä–æ—à—ë–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É", dto.getUnp());
            throw new IllegalArgumentException("–£–ù–ü –Ω–µ –ø—Ä–æ—à—ë–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.");
        }

        if (userRepository.findByUnp(dto.getUnp()).isPresent()) {
            log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –£–ù–ü {} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", dto.getUnp());
            throw new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –£–ù–ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }

        boolean isVerified = verificationService.verifyUNP(dto.getUnp());

        User user = userMapper.toEntity(dto);
        user.setVerified(isVerified);
        User savedUser = userRepository.save(user);

        return userMapper.toDto(savedUser);
    }
}
